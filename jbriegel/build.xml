<project name="jBriegel" default="all" basedir=".">
    <property environment="env" />
    <property name="src"             value="."              />
    <property name="build"           value=".build"         />
    <property name="build-lib"       value="${build}/lib"   />
    <property name="build-tests"     value="${build}/tests" />

    <property name="destdir"        value="" />
    <property name="prefix"         value="${env.HOME}/.usr/jbriegel" />
    <property name="libdir"         value="${prefix}/lib" />
    <property name="bindir"         value="${prefix}/bin" />
    <property name="sysconfdir"     value="${prefix}/etc" />
    <property name="briegelconf"    value="${sysconfdir}/briegel.conf" />
    
    <property name="jarfile"         value="${build}/jbriegel.jar" />
    <property name="jar_install_dir" value="${libdir}" />
    <property name="briegel-runtime" value="${libdir}/jbriegel.jar" />
    <property name="metux-lib"       value="${env.JMETUX_CLASSPATH}" />
    
    <property name="unitool-bindir"  value="${env.HOME}/.usr/unitool/bin" />

    <target name="compile-lib-base">
	<mkdir dir="${build-lib}" />
	<javac destdir="${build-lib}" srcdir="${src}/base" debug="on" classpath="${metux-lib}:." includeantruntime="false">
            <include name="EBriegelError.java"/>
            <include name="EBuildFailed.java"/>
            <include name="ECannotSetupSysroot.java"/>
            <include name="EConfigureFailed.java"/>
            <include name="EFetchSourceFailed.java"/>
            <include name="EInstallBinpkgFailed.java"/>
            <include name="EInstallFailed.java"/>
            <include name="EMisconfig.java"/>
            <include name="EMissingBinpkg.java"/>
            <include name="EMissingDependency.java"/>
            <include name="EMissingFeatureDB.java"/>
            <include name="EMissingFeatureSwitch.java"/>
            <include name="EMissingGlobalConf.java"/>
            <include name="EMissingPackage.java"/>
            <include name="EMissingPort.java"/>
            <include name="EMissingStyle.java"/>
            <include name="EMissingSysrootImage.java"/>
            <include name="EMissingSysrootMarker.java"/>
            <include name="EPostInstallFailed.java"/>
            <include name="EPrepareFailed.java"/>
            <include name="EPropertyInvalid.java"/>
            <include name="EPropertyMissing.java"/>
            <include name="EUnknownBuilder.java"/>
            <include name="EWrongVersion.java"/>
            <include name="FBriegelLogger.java"/>
	</javac>
    </target>

    <target name="compile-lib-conf" depends="compile-lib-base">
	<mkdir dir="${build-lib}" />
	<javac destdir="${build-lib}" srcdir="${src}/conf" debug="on" classpath="${metux-lib}:${build-lib}:." includeantruntime="false">
            <include name="BriegelConf.java"/>
            <include name="ConfigNames.java"/>
            <include name="IConfig.java"/>
            <include name="PkgLocation.java"/>
	</javac>
    </target>

    <target name="compile-lib-stages" depends="compile-lib-base,compile-lib-conf">
	<mkdir dir="${build-lib}" />
	<javac destdir="${build-lib}" srcdir="${src}/stages" debug="on" classpath="${metux-lib}:${build-lib}:." includeantruntime="false">
<!--            <include name="BuilderBase.java"/> -->
            <include name="CreateBinpkg.java"/>
            <include name="FetchSource.java"/>
            <include name="IBuilderRun.java"/>
            <include name="InstallBinpkg.java"/>
            <include name="PostInstall.java"/>
            <include name="Prepare.java"/>
            <include name="SetupSysroot.java"/>
            <include name="Stage.java"/>
	</javac>
    </target>

    <target name="compile-lib-depend" depends="compile-lib-base,compile-lib-conf,compile-lib-stages">
	<mkdir dir="${build-lib}" />
	<javac destdir="${build-lib}" srcdir="${src}/depend" debug="on" classpath="${metux-lib}:${build-lib}:." includeantruntime="false">
            <include name="BuildTracker.java"/>
            <include name="InstallTracker.java"/>
            <include name="Node.java"/>
            <include name="NodeIterator.java"/>
            <include name="Tracker.java"/>
            <include name="Tree.java"/>
	</javac>
    </target>

    <target name="compile-lib-builder_autoconf" depends="compile-lib-base,compile-lib-conf,compile-lib-stages">
	<mkdir dir="${build-lib}" />
	<javac destdir="${build-lib}" srcdir="${src}/builder_autoconf" debug="on" classpath="${metux-lib}:${build-lib}:." includeantruntime="false">
            <include name="Build.java"/>
            <include name="Builder.java"/>
            <include name="Configure.java"/>
            <include name="Install.java"/>
            <include name="Preconfig.java"/> 
	</javac>
    </target>

    <target name="compile-lib-builder_gmake" depends="compile-lib-base,compile-lib-conf,compile-lib-stages">
	<mkdir dir="${build-lib}" />
	<javac destdir="${build-lib}" srcdir="${src}/builder_gmake" debug="on" classpath="${metux-lib}:${build-lib}:." includeantruntime="false">
            <include name="Build.java"/>
	    <include name="Configure.java" />
            <include name="Builder.java"/>
            <include name="Install.java"/>
            <include name="Preconfig.java"/>
	</javac>
    </target>

    <target name="compile-lib-robots" depends="compile-lib-base,compile-lib-conf,compile-lib-builder_autoconf,compile-lib-builder_gmake">
	<mkdir dir="${build-lib}" />
	<javac destdir="${build-lib}" srcdir="${src}/robots" debug="on" classpath="${metux-lib}:${build-lib}:." includeantruntime="false">
            <include name="BuildAll.java"/>
            <include name="BuildBinpkg.java"/>
            <include name="BulkBuild.java"/>
            <include name="InstallRuntimeBinpkg.java"/>
            <include name="InstallTree.java"/>
	    <include name="InstallRuntimeTree.java"/>
            <include name="CreateSystemImage.java"/>
            <include name="RecursiveBuild.java"/>
	</javac>
    </target>

    <target name="compile-lib-cmd" depends="compile-lib-base,compile-lib-conf,compile-lib-depend,compile-lib-stages,compile-lib-robots,compile-lib-stages">
	<mkdir dir="${build-lib}" />
	<javac destdir="${build-lib}" srcdir="${src}/cmd" debug="on" classpath="${metux-lib}:${build-lib}:." includeantruntime="false">
            <include name="Init.java"/>
            <include name="build.java"/>
            <include name="build_all_variants.java"/>
            <include name="buildall.java"/>
            <include name="cf_query.java"/>
            <include name="check_update.java"/>
            <include name="create_image.java"/>
            <include name="fetch_source.java"/>
            <include name="install_port.java"/>
            <include name="setup_sysroot.java"/>
	</javac>
    </target>

    <target name="compile" depends="compile-lib-base,compile-lib-stages,compile-lib-depend,compile-lib-builder_autoconf,compile-lib-builder_gmake,compile-lib-robots,compile-lib-cmd">
        <jar jarfile="${jarfile}" basedir="${build-lib}"/>
    </target>

<!--
    <target name="compile-tests" depends="link-lib,compile-lib-base,compile-lib-log,compile-lib-propertylist">
	<mkdir dir="${build-tests}" />
    	<javac destdir="${build-tests}" srcdir="${src}/tests" debug="on" classpath="${jarfile}">
	    <include name="_test_util.java"/>
	    <include name="_test_log.java"/>
	</javac>
    </target>

    <target name="run-tests" depends="compile-tests">
	<java classname="_test_util" classpath="${jarfile}:${build-tests}" /> 
	<java classname="_test_log" classpath="${jarfile}:${build-tests}" />
    </target>

-->

    <target name="install-scripts" depends="install-commands.sh,install-create-system,install-pkg-config-fixup" />

    <!-- install the command scripts common include --> 	
    <target name="install-commands.sh">
	<mkdir dir="${destdir}${libdir}" />
	<delete file="${destdir}${libdir}/commands.sh" />
	<echo file="${destdir}${libdir}/commands.sh">
if [ ! "$BRIEGEL_SYSTEM" ]; then 
    echo "$0: missing BRIEGEL_SYSTEM"; 
    exit 1;
fi

if [ ! "$BRIEGEL_JVM" ]; then
    export BRIEGEL_JVM=java
fi

if [ ! "$BRIEGEL_ROOT" ]; then
    export BRIEGEL_ROOT="${prefix}"
fi

if [ ! "$BRIEGEL_CONFDIR" ]; then
    export BRIEGEL_CONFDIR="${sysconfdir}"
fi

if [ ! "$BRIEGEL_CONF" ]; then
    export BRIEGEL_CONF="${sysconfdir}/systems/$BRIEGEL_SYSTEM/etc/briegel/briegel.conf"
fi

export CLASSPATH="$CLASSPATH:${metux-lib}:${briegel-runtime}"

case "$BRIEGEL_COMMAND" in
    setup-sysroot)
	$BRIEGEL_JVM org.de.metux.briegel.cmd.setup_sysroot "$*"
    ;;
    fetch-source)
	$BRIEGEL_JVM org.de.metux.briegel.cmd.fetch_source "$*"
    ;;
    install-port)
	$BRIEGEL_JVM org.de.metux.briegel.cmd.install_port "$*"
    ;;
    create-package)
	$BRIEGEL_JVM org.de.metux.briegel.cmd.build "$*"
    ;;
    create-image)
	$BRIEGEL_JVM org.de.metux.briegel.cmd.create_image "$*"
    ;;
    check-update)
	$BRIEGEL_JVM org.de.metux.briegel.cmd.check_update "$*"
    ;;
    build-all)
	$BRIEGEL_JVM org.de.metux.briegel.cmd.buildall "$*"
    ;;
    cf-query)
	$BRIEGEL_JVM org.de.metux.briegel.cmd.cf_query "$*"
    ;;
    *)
	echo "$0: unsupported command \"$BRIEGEL_COMMAND\"" >&amp;2
	exit 1
    ;;
esac
	</echo>
    </target>

    <target name="install-create-system">
	<mkdir dir="${destdir}${bindir}" />
	<delete file="${destdir}${bindir}/create-system" />
	<echo   file="${destdir}${bindir}/create-system">#!/bin/bash

if [ ! "$1" ]; then
    echo "$0: &lt;system&gt;" >&amp;2
    exit 1
fi

BRIEGEL_SYSTEM="$1"
BRIEGEL_CONF_DIR="${sysconfdir}"
BRIEGEL_SYSTEM_DIR="$BRIEGEL_CONF_DIR/systems/$BRIEGEL_SYSTEM"
BRIEGEL_SYSTEM_SCRIPTS="$BRIEGEL_SYSTEM_DIR/scripts"

LINKS="kernel-configure 
       kernel-rebuild 
       create-toolchain 
       create-package 
       create-image
       fetch-source 
       install-port 
       install-special 
       setup-sysroot
       check-update
       build-all
       cf-query
"

mkdir -p $BRIEGEL_SYSTEM_SCRIPTS 

(
    cd $BRIEGEL_SYSTEM_SCRIPTS
    for l in $LINKS ; do 
	rm -f $l
	(
	    echo "#!/bin/sh"
	    echo "#"
	    echo "# autogenerated - do not touch manually"
	    echo "#"
    	    echo "BRIEGEL_SYSTEM=\"$BRIEGEL_SYSTEM\""
	    echo "BRIEGEL_COMMAND=\"$l\""
	    echo ""
	    echo ". ${libdir}/commands.sh"
        ) > $l
	chmod +x $l
    done
)
	</echo>
	<chmod file="${destdir}${bindir}/create-system" perm="u=rwx,go=rx" />
    </target>


    <target name="install-pkg-config-fixup">
	<mkdir dir="${destdir}${bindir}" />
	<delete file="${destdir}${bindir}/pkg-config-fixup" />
	<echo   file="${destdir}${bindir}/pkg-config-fixup">#!/bin/bash

if [ ! "$1" ]; then
    echo "$0: missing install-root"
    exit 1;
fi

cd $1 &amp;&amp; pwd &amp;&amp; find -name "*.pc" -exec "${unitool-bindir}/pkgconfig-fixup" "{}" ";"

	</echo>
	<chmod file="${destdir}${bindir}/pkg-config-fixup" perm="u=rwx,go=rx" />
    </target>


    <target name="all"     depends="compile,run-tests" />
    <target name="run-tests" />    

    <target name="clean">
	<delete dir="${build-tests}" />
	<delete dir="${build-lib}"   />
	<delete dir="${build}"       />
	<delete file="${jarfile}"    />
    </target>
    
    <target name="install" depends="compile,run-tests,install-scripts">
	<mkdir dir="${jar_install_dir}" />
	<mkdir dir="${destdir}${libdir}" />
	<copy file="${jarfile}"   todir="${jar_install_dir}" />
	<copy file="${metux-lib}" todir="${jar_install_dir}" />
    </target>
</project>
