
if [ ! "${BRIEGEL_PREFIX}" ]; then
    echo "$0: missing BRIEGEL_PREFIX"
    exit 123
fi

. $BRIEGEL_PREFIX/lib/briegel/confdb.sh

__briegel_massbuild_rec() {
    local target="$1"	; shift
    local package="$1"	; shift
    local version="$1"	; shift
    local CONFDATA="$1"	; shift
    local feature="$1"	; shift

    if [ "${feature}" ]; then
	__briegel_massbuild_rec "${target}" "${package}" "${version}" "${CONFDATA}\nfeature-enable=${feature}: on"  $*
	__briegel_massbuild_rec "${target}" "${package}" "${version}" "${CONFDATA}\nfeature-enable=${feature}: off" $*
    else
	## create the temporary port config
	local portname="__MASSBUILD.${package}"
	local cf_testing="${BRIEGEL_CONFDIR}/targets/${target}/ports/${portname}.cf"
	(
	    echo "## autogenerated by $0"
	    echo ""
	    echo "@package: ${package}"
	    echo "@version: ${version}"
	    echo ""
	    echo "!!stages-logfile-prefix: \$(massbuild-log-dir)/BRIEGEL-log-"
	    echo "!!stages-cmdfile-prefix: \$(massbuild-log-dir)/BRIEGEL-cmd-"
	    echo ""
	    echo -e "${CONFDATA}"
	) > ${cf_testing}
	export BRIEGEL_MASSBUILD_KEY=`md5sum < "${cf_testing}" | tr '[:space:]-' ' ' | sed -e 's~ ~~g;'`

	local scriptdir="${BRIEGEL_CONFDIR}/targets/${target}/scripts/"
	local builddir=`briegel_get_target_port_cf "${target}" "${portname}" "source-buildroot"`
	local instdir=`briegel_get_target_port_cf "${target}" "${portname}" "packaging-basedir"`
	local logdir=`briegel_get_target_port_cf "${target}" "${portname}" "massbuild-log-dir"`
	local cf_failed="${logdir}/${package}.cf"

	local pkgfile=`briegel_get_target_port_cf "${target}" "${portname}" "packaging-archive-file"`

	if [ -f "${pkgfile}" ]; then
	    echo "Skipping ${portname} on ${target}"
	    echo "  already have binpkg: ${pkgfile}"
	    return 0
	fi

	if ! ( cd "${scriptdir}" && ./create-package "${portname}" ) ; then
	    echo "Failed to build: ${package} (${portname})"
	    cat "${cf_testing}"
	    mkdir -p "${logdir}"
	    cp "${cf_testing}" "${cf_failed}"
	    local hn=`hostname`
	    if [ "${BRIEGEL_MASSBUILD_NOTIFY_FAILED}" ]; then
		(
		    echo
		    echo "Build FAILED: ${package} version ${version} for target ${target}"
		    echo
		    hostname
		    uname -a
		    echo
		    echo "Attached configuration and logfiles"
		    echo
		) | mutt -s "[autobriegel @ ${hn}] build FAILED: ${package}-${version} @ ${target}" \
		    -a "${cf_testing}" `find ${logdir} -name "BRIEGEL-log-*"` "--" "${BRIEGEL_MASSBUILD_NOTIFY_FAILED}"
	    fi
	else
	    if [ "${BRIEGEL_MASSBUILD_NOTIFY_SUCCESS}" ]; then
		(
		    echo
		    echo "Sucessfully built: ${package} version ${version} for target ${target}"
		    echo
		    hostname
		    uname -a
		    echo
		    echo "Attached configuration and logfiles"
		    echo
		) | mutt -s "[autobriegel @ ${hn}] build success: ${package}-${version} @ ${target}" \
		    -a "${cf_testing}" `find ${builddir} -name "BRIEGEL-log-*"` "--" "${BRIEGEL_MASSBUILD_NOTIFY_SUCCESS}"
	    fi
	fi
	rm -Rf "${builddir}" "${instdir}" "${cf_testing}"
    fi
}

briegel_run_massbuild() {
    local target="$1"
    local package="$2"
    local versionlist=`echo "$3" | tr ',' ' '`
    local version
    for version in ${versionlist} ; do
	echo "[${target}] running tests for ${package} version ${version}"
	__briegel_massbuild_rec "$target" "${package}" "${version}" "" `briegel_get_target_pkg_features "${target}" "${package}"`
    done
}
